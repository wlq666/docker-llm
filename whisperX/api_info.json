{
    "openapi": "3.0.2",
    "info": {
        "title": "Cog",
        "version": "0.1.0"
    },
    "paths": {
        "/": {
            "get": {
                "summary": "Root",
                "operationId": "root__get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Root  Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/health-check": {
            "get": {
                "summary": "Healthcheck",
                "operationId": "healthcheck_health_check_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Healthcheck Health Check Get"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/predictions": {
            "post": {
                "summary": "Predict",
                "description": "Run a single prediction on the model",
                "operationId": "predict_predictions_post",
                "parameters": [
                    {
                        "required": false,
                        "schema": {
                            "title": "Prefer",
                            "type": "string"
                        },
                        "name": "prefer",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PredictionRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PredictionResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/predictions/{prediction_id}": {
            "put": {
                "summary": "Predict Idempotent",
                "description": "Run a single prediction on the model (idempotent creation).",
                "operationId": "predict_idempotent_predictions__prediction_id__put",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Prediction ID",
                            "type": "string"
                        },
                        "name": "prediction_id",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Prefer",
                            "type": "string"
                        },
                        "name": "prefer",
                        "in": "header"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "title": "Prediction Request",
                                "allOf": [
                                    {
                                        "$ref": "#/components/schemas/PredictionRequest"
                                    }
                                ]
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PredictionResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/predictions/{prediction_id}/cancel": {
            "post": {
                "summary": "Cancel",
                "description": "Cancel a running prediction",
                "operationId": "cancel_predictions__prediction_id__cancel_post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Prediction ID",
                            "type": "string"
                        },
                        "name": "prediction_id",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Cancel Predictions  Prediction Id  Cancel Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/shutdown": {
            "post": {
                "summary": "Start Shutdown",
                "operationId": "start_shutdown_shutdown_post",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "title": "Response Start Shutdown Shutdown Post"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "Input": {
                "title": "Input",
                "required": [
                    "prompt"
                ],
                "type": "object",
                "properties": {
                    "prompt": {
                        "title": "Prompt",
                        "type": "string",
                        "description": "Prompt to send to the model.",
                        "x-order": 0
                    },
                    "mirostat": {
                        "title": "Mirostat",
                        "type": "integer",
                        "description": "Enable Mirostat sampling for controlling perplexity. (default: 0, 0 = disabled, 1 = Mirostat, 2 = Mirostat 2.0)",
                        "maximum": 2,
                        "minimum": 0,
                        "default": 0,
                        "x-order": 1
                    },
                    "mirostat_eta": {
                        "title": "Mirostat eta",
                        "type": "number",
                        "description": "Influences how quickly the algorithm responds to feedback from the generated text. A lower learning rate will result in slower adjustments, while a higher learning rate will make the algorithm more responsive.",
                        "default": 0.1,
                        "x-order": 2
                    },
                    "mirostat_tau": {
                        "title": "Mirostat tau",
                        "type": "number",
                        "description": "Controls the balance between coherence and diversity of the output. A lower value will result in more focused and coherent text. ",
                        "default": 5.0,
                        "x-order": 3
                    },
                    "num_ctx": {
                        "title": "Number of Contexts",
                        "type": "integer",
                        "description": "Sets the size of the context window used to generate the next token.",
                        "default": 2048,
                        "x-order": 4
                    },
                    "repeat_last_n": {
                        "title": "Repeat Last N",
                        "type": "integer",
                        "description": "Sets how far back for the model to look back to prevent repetition. (Default: 64, 0 = disabled, -1 = num_ctx)",
                        "default": 64,
                        "x-order": 5
                    },
                    "temperature": {
                        "title": "Temperature",
                        "maximum": 5.0,
                        "minimum": 0.01,
                        "type": "number",
                        "description": "Adjusts randomness of outputs, greater than 1 is random and 0 is deterministic, 0.75 is a good starting value.",
                        "default": 0.7,
                        "x-order": 6
                    },
                    "top_p": {
                        "title": "Top P",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "type": "number",
                        "description": "When decoding text, samples from the top p percentage of most likely tokens; lower to ignore less likely tokens",
                        "default": 0.95,
                        "x-order":7
                    },
                    "top_k": {
                        "title": "Top K",
                        "minimum": -1.0,
                        "type": "integer",
                        "description": "When decoding text, samples from the top k most likely tokens; lower to ignore less likely tokens",
                        "default": -1,
                        "x-order": 8
                    },
                    "repeat_penalty": {
                        "title": "Repeat_penalty",
                        "minimum": 0.0,
                        "type": "number",
                        "description": "Sets how strongly to penalize repetitions. A higher value (e.g., 1.5) will penalize repetitions more strongly, while a lower value (e.g., 0.9) will be more lenient. (Default: 1.1)",
                        "default": 1.1,
                        "x-order": 9
                    },
                    "stop_sequences": {
                        "title": "Stop Sequences",
                        "type": "list",
                        "description": "A comma-separated list of sequences to stop generation at. For example, '<end>,<stop>' will stop generation at the first instance of 'end' or '<stop>'.",
                        "x-order": 10
                    },
                    "seed": {
                        "title": "Seed",
                        "type": "integer",
                        "description": "Random seed. Leave blank to randomize the seed",
                        "x-order": 11
                    },
                    "debug": {
                        "title": "Debug",
                        "type": "boolean",
                        "description": "provide debugging output in logs",
                        "default": false,
                        "x-order": 12
                    }
                }
            },
            "Output": {
                "title": "Output",
                "type": "array",
                "items": {
                    "type": "string"
                },
                "x-cog-array-type": "iterator",
                "x-cog-array-display": "concatenate"
            },
            "PredictionRequest": {
                "title": "PredictionRequest",
                "type": "object",
                "properties": {
                    "input": {
                        "$ref": "#/components/schemas/Input"
                    },
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "format": "date-time"
                    },
                    "output_file_prefix": {
                        "title": "Output File Prefix",
                        "type": "string"
                    },
                    "webhook": {
                        "title": "Webhook",
                        "maxLength": 65536,
                        "minLength": 1,
                        "type": "string",
                        "format": "uri"
                    },
                    "webhook_events_filter": {
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/WebhookEvent"
                        },
                        "default": [
                            "start",
                            "output",
                            "logs",
                            "completed"
                        ]
                    }
                }
            },
            "PredictionResponse": {
                "title": "PredictionResponse",
                "type": "object",
                "properties": {
                    "input": {
                        "$ref": "#/components/schemas/Input"
                    },
                    "output": {
                        "$ref": "#/components/schemas/Output"
                    },
                    "id": {
                        "title": "Id",
                        "type": "string"
                    },
                    "version": {
                        "title": "Version",
                        "type": "string"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "string",
                        "format": "date-time"
                    },
                    "started_at": {
                        "title": "Started At",
                        "type": "string",
                        "format": "date-time"
                    },
                    "completed_at": {
                        "title": "Completed At",
                        "type": "string",
                        "format": "date-time"
                    },
                    "logs": {
                        "title": "Logs",
                        "type": "string",
                        "default": ""
                    },
                    "error": {
                        "title": "Error",
                        "type": "string"
                    },
                    "status": {
                        "$ref": "#/components/schemas/Status"
                    },
                    "metrics": {
                        "title": "Metrics",
                        "type": "object"
                    }
                }
            },
            "Status": {
                "title": "Status",
                "enum": [
                    "starting",
                    "processing",
                    "succeeded",
                    "canceled",
                    "failed"
                ],
                "type": "string",
                "description": "An enumeration."
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            },
            "WebhookEvent": {
                "title": "WebhookEvent",
                "enum": [
                    "start",
                    "output",
                    "logs",
                    "completed"
                ],
                "type": "string",
                "description": "An enumeration."
            }
        }
    }
}